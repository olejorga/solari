<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Solari.Data.Access</name>
    </assembly>
    <members>
        <member name="T:Solari.Data.Access.Models.Airline">
            <summary>
            A schema for an airline.
            </summary>
        </member>
        <member name="P:Solari.Data.Access.Models.Airline.Icao">
            <summary>
            A unique three letter identifier (PK).
            </summary>
        </member>
        <member name="P:Solari.Data.Access.Models.Airline.Iata">
            <summary>
            A two letter identifier (not unique).
            </summary>
        </member>
        <member name="P:Solari.Data.Access.Models.Airline.Name">
            <summary>
            The name of the airline
            </summary>
        </member>
        <member name="P:Solari.Data.Access.Models.Airline.Flights">
            <summary>
            A aggregated list of flights flying for the airline.
            </summary>
        </member>
        <member name="T:Solari.Data.Access.Models.Airport">
            <summary>
            A schema for an airport.
            </summary>
        </member>
        <member name="P:Solari.Data.Access.Models.Airport.Icao">
            <summary>
            A unique four letter identifier (PK).
            </summary>
        </member>
        <member name="P:Solari.Data.Access.Models.Airport.Iata">
            <summary>
            A three letter identifier (not unique).
            </summary>
        </member>
        <member name="P:Solari.Data.Access.Models.Airport.Name">
            <summary>
            The name of the airport.
            </summary>
        </member>
        <member name="P:Solari.Data.Access.Models.Airport.City">
            <summary>
            The city of which the airport adheres to.
            </summary>
        </member>
        <member name="P:Solari.Data.Access.Models.Airport.DepartingFlights">
            <summary>
            A aggregated list of flights scheduled to depart the airport.
            </summary>
        </member>
        <member name="P:Solari.Data.Access.Models.Airport.ArrivingFlights">
            <summary>
            A aggregated list of flights scheduled to arrive the airport.
            </summary>
        </member>
        <member name="T:Solari.Data.Access.Models.Flight">
            <summary>
            A schema for an airport.
            </summary>
        </member>
        <member name="P:Solari.Data.Access.Models.Flight.FlightNumber">
            <summary>
            A unique identifier between 3 and 6 letters (PK).
            </summary>
        </member>
        <member name="P:Solari.Data.Access.Models.Flight.Status">
            <summary>
            A optional status message for the flight.
            </summary>
        </member>
        <member name="P:Solari.Data.Access.Models.Flight.DepartureTime">
            <summary>
            The estimated time of departure.
            </summary>
        </member>
        <member name="P:Solari.Data.Access.Models.Flight.ArrivalTime">
            <summary>
            The estimated time of arrival.
            </summary>
        </member>
        <member name="P:Solari.Data.Access.Models.Flight.DepartureGate">
            <summary>
            The identifier of the departure gate at the departure airport.
            </summary>
        </member>
        <member name="P:Solari.Data.Access.Models.Flight.BaggageBelt">
            <summary>
            The identifier of the baggage belt at the arrival airport.
            </summary>
        </member>
        <member name="P:Solari.Data.Access.Models.Flight.DepartureAirport">
            <summary>
            The aggregated object representation of the departure airport.
            </summary>
        </member>
        <member name="P:Solari.Data.Access.Models.Flight.DepartureAirportIcao">
            <summary>
            The ICAO code of the departure airport (FK).
            </summary>
        </member>
        <member name="P:Solari.Data.Access.Models.Flight.Airline">
            <summary>
            The aggregated object representation of the arrival airport.
            </summary>
        </member>
        <member name="P:Solari.Data.Access.Models.Flight.AirlineIcao">
            <summary>
            The ICAO code of the arrival airport (FK).
            </summary>
        </member>
        <member name="T:Solari.Data.Access.Repositories.SqlAirlineRepository">
            <summary>
            An abstraction of the airlines SQL table, 
            built with EF Core 5 and designed with CRUD in mind.
            </summary>
        </member>
        <member name="M:Solari.Data.Access.Repositories.SqlAirlineRepository.GetAirlinesAsync">
            <summary>
            Gets all airlines in repository.
            </summary>
            <returns>All airlines in repository.</returns>
            <exception cref="T:Solari.Data.Access.Exceptions.EntitiesNotFoundException">No airlines were found.</exception>
        </member>
        <member name="M:Solari.Data.Access.Repositories.SqlAirlineRepository.GetAirlineAsync(System.String)">
            <summary>
            Gets airline by ICAO code.
            </summary>
            <param name="icao">The airlines three letter ICAO identifier.</param>
            <returns>Airline matching the ICAO code.</returns>
            <exception cref="T:Solari.Data.Access.Exceptions.EntityNotFoundException">No airline were found.</exception>
        </member>
        <member name="M:Solari.Data.Access.Repositories.SqlAirlineRepository.AddAirlineAsync(Solari.Data.Access.Models.Airline)">
            <summary>
            Adds an airline to the repository.
            </summary>
            <param name="airline">A airline object.</param>
            <returns>The added airline entry in the repository.</returns>
            <exception cref="T:Solari.Data.Access.Exceptions.EntityAlreadyExistsException">Airline already exists.</exception>
        </member>
        <member name="M:Solari.Data.Access.Repositories.SqlAirlineRepository.UpdateAirlineAsync(Solari.Data.Access.Models.Airline)">
            <summary>
            Updates an airline in the repository.
            </summary>
            <param name="airline">A updated airline object.</param>
            <returns>The updated airline entry in the repository.</returns>
            <exception cref="T:Solari.Data.Access.Exceptions.EntityNotFoundException">No airline were found.</exception>
        </member>
        <member name="M:Solari.Data.Access.Repositories.SqlAirlineRepository.DeleteAirlineAsync(System.String)">
            <summary>
            Delete an airline from the repository.
            </summary>
            <param name="icao">The airlines three letter ICAO identifier.</param>
            <returns>The deleted airline entry in the repository.</returns>
            <exception cref="T:Solari.Data.Access.Exceptions.EntityNotFoundException">No airline were found.</exception>
        </member>
        <member name="T:Solari.Data.Access.Repositories.SqlAirportRepository">
            <summary>
            An abstraction of the airports SQL table, 
            built with EF Core 5 and designed with CRUD in mind.
            </summary>
        </member>
        <member name="M:Solari.Data.Access.Repositories.SqlAirportRepository.GetAirportsAsync">
            <summary>
            Gets all airports in repository.
            </summary>
            <returns>All airports in repository.</returns>
            <exception cref="T:Solari.Data.Access.Exceptions.EntitiesNotFoundException">No airports were found.</exception>
        </member>
        <member name="M:Solari.Data.Access.Repositories.SqlAirportRepository.GetAirportAsync(System.String)">
            <summary>
            Gets airport by ICAO code.
            </summary>
            <param name="icao">The airports four letter ICAO identifier.</param>
            <returns>Airport matching the ICAO code.</returns>
            <exception cref="T:Solari.Data.Access.Exceptions.EntityNotFoundException">No airport were found.</exception>
        </member>
        <member name="M:Solari.Data.Access.Repositories.SqlAirportRepository.AddAirportAsync(Solari.Data.Access.Models.Airport)">
            <summary>
            Adds an airport to the repository.
            </summary>
            <param name="airport">A airport object.</param>
            <returns>The added airport entry in the repository.</returns>
            <exception cref="T:Solari.Data.Access.Exceptions.EntityAlreadyExistsException">Airport already exists.</exception>
        </member>
        <member name="M:Solari.Data.Access.Repositories.SqlAirportRepository.UpdateAirportAsync(Solari.Data.Access.Models.Airport)">
            <summary>
            Updates an airport in the repository.
            </summary>
            <param name="airport">A updated airport object.</param>
            <returns>The updated airport entry in the repository.</returns>
            <exception cref="T:Solari.Data.Access.Exceptions.EntityNotFoundException">No airport were found.</exception>
        </member>
        <member name="M:Solari.Data.Access.Repositories.SqlAirportRepository.DeleteAirportAsync(System.String)">
            <summary>
            Delete an airport from the repository.
            </summary>
            <param name="icao">The airports four letter ICAO identifier.</param>
            <returns>The deleted airport entry in the repository.</returns>
            <exception cref="T:Solari.Data.Access.Exceptions.EntityNotFoundException">No airport were found.</exception>
        </member>
        <member name="T:Solari.Data.Access.Repositories.SqlFlightRepository">
            <summary>
            An abstraction of the flights SQL table, 
            built with EF Core 5 and designed with CRUD in mind.
            </summary>
        </member>
        <member name="M:Solari.Data.Access.Repositories.SqlFlightRepository.GetFlightsAsync">
            <summary>
            Gets all flights in repository.
            </summary>
            <returns>All flights in repository.</returns>
            <exception cref="T:Solari.Data.Access.Exceptions.EntitiesNotFoundException">No flights were found.</exception>
        </member>
        <member name="M:Solari.Data.Access.Repositories.SqlFlightRepository.GetFlightAsync(System.String)">
            <summary>
            Gets flight by flight number.
            </summary>
            <param name="flightNumber">The flights flight number.</param>
            <returns>Flight matching the flight number.</returns>
            <exception cref="T:Solari.Data.Access.Exceptions.EntityNotFoundException">No flight were found.</exception>
        </member>
        <member name="M:Solari.Data.Access.Repositories.SqlFlightRepository.AddFlightAsync(Solari.Data.Access.Models.Flight)">
            <summary>
            Adds a flight to the repository.
            </summary>
            <param name="flight">A flight object.</param>
            <returns>The added flight entry in the repository.</returns>
            <exception cref="T:Solari.Data.Access.Exceptions.EntityAlreadyExistsException">Flight already exists.</exception>
        </member>
        <member name="M:Solari.Data.Access.Repositories.SqlFlightRepository.UpdateFlightAsync(Solari.Data.Access.Models.Flight)">
            <summary>
            Updates a flight in the repository.
            </summary>
            <param name="flight">A updated flight object.</param>
            <returns>The updated flight entry in the repository.</returns>
            <exception cref="T:Solari.Data.Access.Exceptions.EntityNotFoundException">No flight were found.</exception>
        </member>
        <member name="M:Solari.Data.Access.Repositories.SqlFlightRepository.DeleteFlightAsync(System.String)">
            <summary>
            Delete a flight from the repository.
            </summary>
            <param name="flightNumber">The flights flight number.</param>
            <returns>The deleted flight entry in the repository.</returns>
            <exception cref="T:Solari.Data.Access.Exceptions.EntityNotFoundException">No flight were found.</exception>
        </member>
    </members>
</doc>
